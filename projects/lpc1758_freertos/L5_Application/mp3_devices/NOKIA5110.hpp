#ifndef NOKIA5110_HPP_
#define NOKIA5110_HPP_

#include "tasks.hpp"
#include "LPC17xx.h"
#include "L4_IO/gpio.hpp"
#include "L2_Drivers/ssp1.h"
#include "L2_Drivers/lpc_pwm.hpp"


class NOKIA5110{
private:
    GPIO *m_sce, *m_dc, *m_reset;

    PWM *m_backlight;

    enum CMD_DATA{
        LCD_COMMAND = 0,
        LCD_DATA = 1
    };

    uint8_t m_no_op_cmd = 0x00; // command to inform display to do no operation
    uint8_t m_basic_instr_cmd = 0x20; //set function to use basic instruction set
    uint8_t m_extended_instr_cmd = 0x21; //set function to use extended instruction set

    static constexpr uint8_t LCD_WIDTH = 84; // X-coordinates go wide (column)
    static constexpr uint8_t LCD_HEIGHT = 48; //Y-coordinates go high (row)


    // Each char is 5 pixels wide and 8 pixels in height
    // In this case the characters are inverted
    // Found this example for arduino but it works here, no need to re-invent the wheel
    // Font used is monospace

    static constexpr uint8_t ascii[][5] = {
            // The first 32 characters are ignored [0x00 - 0x19]
            // since they're non-displayable control characters
            {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x20
            {0x00, 0x00, 0x5f, 0x00, 0x00}, // 0x21 !
            {0x00, 0x07, 0x00, 0x07, 0x00}, // 0x22 "
            {0x14, 0x7f, 0x14, 0x7f, 0x14}, // 0x23 #
            {0x24, 0x2a, 0x7f, 0x2a, 0x12}, // 0x24 $
            {0x23, 0x13, 0x08, 0x64, 0x62}, // 0x25 %
            {0x36, 0x49, 0x55, 0x22, 0x50}, // 0x26 &
            {0x00, 0x05, 0x03, 0x00, 0x00}, // 0x27 '
            {0x00, 0x1c, 0x22, 0x41, 0x00}, // 0x28 (
            {0x00, 0x41, 0x22, 0x1c, 0x00}, // 0x29 )
            {0x14, 0x08, 0x3e, 0x08, 0x14}, // 0x2a *
            {0x08, 0x08, 0x3e, 0x08, 0x08}, // 0x2b +
            {0x00, 0x50, 0x30, 0x00, 0x00}, // 0x2c ,
            {0x08, 0x08, 0x08, 0x08, 0x08}, // 0x2d -
            {0x00, 0x60, 0x60, 0x00, 0x00}, // 0x2e .
            {0x20, 0x10, 0x08, 0x04, 0x02}, // 0x2f /
            {0x3e, 0x51, 0x49, 0x45, 0x3e}, // 0x30 0
            {0x00, 0x42, 0x7f, 0x40, 0x00}, // 0x31 1
            {0x42, 0x61, 0x51, 0x49, 0x46}, // 0x32 2
            {0x21, 0x41, 0x45, 0x4b, 0x31}, // 0x33 3
            {0x18, 0x14, 0x12, 0x7f, 0x10}, // 0x34 4
            {0x27, 0x45, 0x45, 0x45, 0x39}, // 0x35 5
            {0x3c, 0x4a, 0x49, 0x49, 0x30}, // 0x36 6
            {0x01, 0x71, 0x09, 0x05, 0x03}, // 0x37 7
            {0x36, 0x49, 0x49, 0x49, 0x36}, // 0x38 8
            {0x06, 0x49, 0x49, 0x29, 0x1e}, // 0x39 9
            {0x00, 0x36, 0x36, 0x00, 0x00}, // 0x3a :
            {0x00, 0x56, 0x36, 0x00, 0x00}, // 0x3b ;
            {0x08, 0x14, 0x22, 0x41, 0x00}, // 0x3c <
            {0x14, 0x14, 0x14, 0x14, 0x14}, // 0x3d =
            {0x00, 0x41, 0x22, 0x14, 0x08}, // 0x3e >
            {0x02, 0x01, 0x51, 0x09, 0x06}, // 0x3f ?
            {0x32, 0x49, 0x79, 0x41, 0x3e}, // 0x40 @
            {0x7e, 0x11, 0x11, 0x11, 0x7e}, // 0x41 A
            {0x7f, 0x49, 0x49, 0x49, 0x36}, // 0x42 B
            {0x3e, 0x41, 0x41, 0x41, 0x22}, // 0x43 C
            {0x7f, 0x41, 0x41, 0x22, 0x1c}, // 0x44 D
            {0x7f, 0x49, 0x49, 0x49, 0x41}, // 0x45 E
            {0x7f, 0x09, 0x09, 0x09, 0x01}, // 0x46 F
            {0x3e, 0x41, 0x49, 0x49, 0x7a}, // 0x47 G
            {0x7f, 0x08, 0x08, 0x08, 0x7f}, // 0x48 H
            {0x00, 0x41, 0x7f, 0x41, 0x00}, // 0x49 I
            {0x20, 0x40, 0x41, 0x3f, 0x01}, // 0x4a J
            {0x7f, 0x08, 0x14, 0x22, 0x41}, // 0x4b K
            {0x7f, 0x40, 0x40, 0x40, 0x40}, // 0x4c L
            {0x7f, 0x02, 0x0c, 0x02, 0x7f}, // 0x4d M
            {0x7f, 0x04, 0x08, 0x10, 0x7f}, // 0x4e N
            {0x3e, 0x41, 0x41, 0x41, 0x3e}, // 0x4f O
            {0x7f, 0x09, 0x09, 0x09, 0x06}, // 0x50 P
            {0x3e, 0x41, 0x51, 0x21, 0x5e}, // 0x51 Q
            {0x7f, 0x09, 0x19, 0x29, 0x46}, // 0x52 R
            {0x46, 0x49, 0x49, 0x49, 0x31}, // 0x53 S
            {0x01, 0x01, 0x7f, 0x01, 0x01}, // 0x54 T
            {0x3f, 0x40, 0x40, 0x40, 0x3f}, // 0x55 U
            {0x1f, 0x20, 0x40, 0x20, 0x1f}, // 0x56 V
            {0x3f, 0x40, 0x38, 0x40, 0x3f}, // 0x57 W
            {0x63, 0x14, 0x08, 0x14, 0x63}, // 0x58 X
            {0x07, 0x08, 0x70, 0x08, 0x07}, // 0x59 Y
            {0x61, 0x51, 0x49, 0x45, 0x43}, // 0x5a Z
            {0x00, 0x7f, 0x41, 0x41, 0x00}, // 0x5b [
            {0x02, 0x04, 0x08, 0x10, 0x20}, // 0x5c \ (keep this to escape the backslash)
            {0x00, 0x41, 0x41, 0x7f, 0x00}, // 0x5d ]
            {0x04, 0x02, 0x01, 0x02, 0x04}, // 0x5e ^
            {0x40, 0x40, 0x40, 0x40, 0x40}, // 0x5f _
            {0x00, 0x01, 0x02, 0x04, 0x00}, // 0x60 `
            {0x20, 0x54, 0x54, 0x54, 0x78}, // 0x61 a
            {0x7f, 0x48, 0x44, 0x44, 0x38}, // 0x62 b
            {0x38, 0x44, 0x44, 0x44, 0x20}, // 0x63 c
            {0x38, 0x44, 0x44, 0x48, 0x7f}, // 0x64 d
            {0x38, 0x54, 0x54, 0x54, 0x18}, // 0x65 e
            {0x08, 0x7e, 0x09, 0x01, 0x02}, // 0x66 f
            {0x0c, 0x52, 0x52, 0x52, 0x3e}, // 0x67 g
            {0x7f, 0x08, 0x04, 0x04, 0x78}, // 0x68 h
            {0x00, 0x44, 0x7d, 0x40, 0x00}, // 0x69 i
            {0x20, 0x40, 0x44, 0x3d, 0x00}, // 0x6a j
            {0x7f, 0x10, 0x28, 0x44, 0x00}, // 0x6b k
            {0x00, 0x41, 0x7f, 0x40, 0x00}, // 0x6c l
            {0x7c, 0x04, 0x18, 0x04, 0x78}, // 0x6d m
            {0x7c, 0x08, 0x04, 0x04, 0x78}, // 0x6e n
            {0x38, 0x44, 0x44, 0x44, 0x38}, // 0x6f o
            {0x7c, 0x14, 0x14, 0x14, 0x08}, // 0x70 p
            {0x08, 0x14, 0x14, 0x18, 0x7c}, // 0x71 q
            {0x7c, 0x08, 0x04, 0x04, 0x08}, // 0x72 r
            {0x48, 0x54, 0x54, 0x54, 0x20}, // 0x73 s
            {0x04, 0x3f, 0x44, 0x40, 0x20}, // 0x74 t
            {0x3c, 0x40, 0x40, 0x20, 0x7c}, // 0x75 u
            {0x1c, 0x20, 0x40, 0x20, 0x1c}, // 0x76 v
            {0x3c, 0x40, 0x30, 0x40, 0x3c}, // 0x77 w
            {0x44, 0x28, 0x10, 0x28, 0x44}, // 0x78 x
            {0x0c, 0x50, 0x50, 0x50, 0x3c}, // 0x79 y
            {0x44, 0x64, 0x54, 0x4c, 0x44}, // 0x7a z
            {0x00, 0x08, 0x36, 0x41, 0x00}, // 0x7b {
            {0x00, 0x00, 0x7f, 0x00, 0x00}, // 0x7c |
            {0x00, 0x41, 0x36, 0x08, 0x00}, // 0x7d }
            {0x10, 0x08, 0x08, 0x10, 0x08}, // 0x7e ~
            {0x78, 0x46, 0x41, 0x46, 0x78} // 0x7f DEL
    };

    // Becuase of the screen RAM we must first write the pixels we wish to print to memory before displaying
    // Note the comment next to each row, these are the (x,y) positions from first pixel to last on that row

    uint8_t display_map[LCD_WIDTH * LCD_HEIGHT / 8] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,0)->(11,7)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,0)->(23,7)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, // (24,0)->(35,7)
            0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0x1E, 0x0E, 0x02, 0x00, // (36,0)->(47,7)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (48,0)->(59,7)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,0)->(71,7)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,0)->(83,7)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,8)->(11,15)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,8)->(23,15)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // (24,8)->(35,15)
            0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, // (36,8)->(47,15)
            0xF8, 0xF0, 0xF8, 0xFE, 0xFE, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, // (48,8)->(59,15)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,8)->(71,15)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,8)->(83,15)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,16)->(11,23)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,16)->(23,23)
            0x00, 0x00, 0xF8, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xF3, 0xE0, 0xE0, 0xC0, // (24,16)->(35,23)
            0xC0, 0xC0, 0xE0, 0xE0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // (36,16)->(47,23)
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x00, 0x00, 0x00, // (48,16)->(59,23)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,16)->(71,23)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,16)->(83,23)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,24)->(11,31)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,24)->(23,31)
            0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // (24,24)->(35,31)
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // (36,24)->(47,31)
            0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, // (48,24)->(59,31)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,24)->(71,31)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,24)->(83,31)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,32)->(11,39)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,32)->(23,39)
            0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, // (24,32)->(35,39)
            0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, // (36,32)->(47,39)
            0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (48,32)->(59,39)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,32)->(71,39)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,32)->(83,39)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,40)->(11,47)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,40)->(23,47)
            0x00, 0x00, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, // (24,40)->(35,47)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (36,40)->(47,47)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (48,40)->(59,47)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,40)->(71,47)
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };


public:
    //Constants that specifies how the display will be cleared
    enum CLEAR_DISPLAY{
        WHITE = 1,
        BLACK = 0
    };

    // Default constructor
    NOKIA5110();

    // Constructor with initialized objects
    NOKIA5110(GPIO *sce, GPIO *dc, GPIO *reset, PWM *pwm_pin);

    // Initializes all of the peripherals passed on by the constructor
    // SCE -> Output
    // DC  -> Output
    // RST -> Output
    void init_peripherals();

    // Sets PWM
    void turn_on_backlight();

    void turn_off_backlight();

    // Hard reset of the LCD screen
    // PCD8544 Datasheet Figure 13
    void reset();

    // Function that transfers the information stored on the display_map and
    // writes it to LCD screen by clearing or setting bits specified
    void update_display();

    // Clears all of pixels
    void clear_display(bool white_background);

    // Init peripherals
    // Reset Screen
    // Set Contrast
    // Set Temperature
    // Set screen to Display Mode
    // Clear all pixels
    bool init_display();

    /**
     * Takes data stored on the display_map
     * array and sets pixel by pixel by checking if the bit is set
     */
    void print_char(uint8_t x, uint8_t y, char character, bool black_character);

    /**
     * Simply leverages print_char function until all of the chars in the string are accounted for
     * Note: As of now looking for '\0' for exiting character
     */
    void print_string(uint8_t x, uint8_t y, const char *string, bool black_character);

    /**
     * Contrast dependent on operating voltage
     * do not change unless needed
     */
    void set_contrast(uint8_t contrast);

    private:

    /**
     * Sets SCE low
     * LCD device is active low
     */
    void select_display();

    /**
     * Sets 0SCE high
     * LCD Device is active low
     */
    void deselect_display();

    /**
     * DC set to high
     */
    void select_data_mode();

    /**
     * DC set to low
     */
    void select_command_mode();

    /**
     * Leverages ssp1_exchange_byte
     * to write commands, this is determined by DC
     */
    void send_command(uint8_t *command);

    /**
     * Leverages send_command function multiple times
     */
    void send_commands(uint8_t *command, uint8_t size);

     /**
     * Leverages ssp1_exchange_byte
     * to write data, this is determined by DC
     */
    void send_data(uint8_t *data);

    /**
     * Leverages send_data function multiple times
     */
    void send_data_bytes(uint8_t *data, uint8_t size);

    void no_op();

    /**
     * Leverages ssp1_exchange_byte
     * to wset a function
     */
    void set_function(uint8_t function);

    void control_display(uint8_t configuration);

    void set_address_y(uint8_t y_address);

    void set_address_x(uint8_t x_address);

    void set_temperature(uint8_t temp_coefficient);

    void set_bias(uint8_t bias);

    /**
     * dont mess with this after setting it inittially
     */
    void set_Vop(uint8_t Vop);

    void set_xy_location(uint8_t x, uint8_t y);

    /**
     * Most funcdamental and imporatnt function, everthing builds off this
     * sets individual bit based on x and y position
     */
    void set_pixel(uint8_t x, uint8_t y, bool black_character);

};

#endif //NOKIA5110_HPP_
